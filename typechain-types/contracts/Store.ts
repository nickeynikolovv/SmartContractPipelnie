/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StoreBase {
  export type ProductStruct = { name: string; quantity: BigNumberish };

  export type ProductStructOutput = [name: string, quantity: bigint] & {
    name: string;
    quantity: bigint;
  };
}

export interface StoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProduct"
      | "buyProduct"
      | "getAllProducts"
      | "getProductBuyersById"
      | "getProductById"
      | "getProductByName"
      | "getRefundPolicyNumber"
      | "owner"
      | "products"
      | "refundProduct"
      | "renounceOwnership"
      | "setRefundPolicyNumber"
      | "transferOwnership"
      | "updateProductQuantity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProductAdded"
      | "ProductBought"
      | "ProductRefund"
      | "ProductUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProduct",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProductBuyersById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefundPolicyNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundPolicyNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProductQuantity",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductBuyersById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefundPolicyNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundPolicyNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProductQuantity",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    quantity: BigNumberish
  ];
  export type OutputTuple = [id: bigint, name: string, quantity: bigint];
  export interface OutputObject {
    id: bigint;
    name: string;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductBoughtEvent {
  export type InputTuple = [id: BigNumberish, buyer: AddressLike];
  export type OutputTuple = [id: bigint, buyer: string];
  export interface OutputObject {
    id: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductRefundEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    quantity: BigNumberish
  ];
  export type OutputTuple = [id: bigint, name: string, quantity: bigint];
  export interface OutputObject {
    id: bigint;
    name: string;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Store extends BaseContract {
  connect(runner?: ContractRunner | null): Store;
  waitForDeployment(): Promise<this>;

  interface: StoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProduct: TypedContractMethod<
    [name: string, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyProduct: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getAllProducts: TypedContractMethod<
    [],
    [StoreBase.ProductStructOutput[]],
    "view"
  >;

  getProductBuyersById: TypedContractMethod<
    [id: BigNumberish],
    [string[]],
    "view"
  >;

  getProductById: TypedContractMethod<
    [id: BigNumberish],
    [StoreBase.ProductStructOutput],
    "view"
  >;

  getProductByName: TypedContractMethod<
    [name: string],
    [StoreBase.ProductStructOutput],
    "view"
  >;

  getRefundPolicyNumber: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; quantity: bigint }],
    "view"
  >;

  refundProduct: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setRefundPolicyNumber: TypedContractMethod<
    [blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateProductQuantity: TypedContractMethod<
    [id: BigNumberish, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProduct"
  ): TypedContractMethod<
    [name: string, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyProduct"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllProducts"
  ): TypedContractMethod<[], [StoreBase.ProductStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getProductBuyersById"
  ): TypedContractMethod<[id: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getProductById"
  ): TypedContractMethod<
    [id: BigNumberish],
    [StoreBase.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductByName"
  ): TypedContractMethod<
    [name: string],
    [StoreBase.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRefundPolicyNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; quantity: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "refundProduct"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRefundPolicyNumber"
  ): TypedContractMethod<[blockNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateProductQuantity"
  ): TypedContractMethod<
    [id: BigNumberish, quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProductAdded"
  ): TypedContractEvent<
    ProductAddedEvent.InputTuple,
    ProductAddedEvent.OutputTuple,
    ProductAddedEvent.OutputObject
  >;
  getEvent(
    key: "ProductBought"
  ): TypedContractEvent<
    ProductBoughtEvent.InputTuple,
    ProductBoughtEvent.OutputTuple,
    ProductBoughtEvent.OutputObject
  >;
  getEvent(
    key: "ProductRefund"
  ): TypedContractEvent<
    ProductRefundEvent.InputTuple,
    ProductRefundEvent.OutputTuple,
    ProductRefundEvent.OutputObject
  >;
  getEvent(
    key: "ProductUpdated"
  ): TypedContractEvent<
    ProductUpdatedEvent.InputTuple,
    ProductUpdatedEvent.OutputTuple,
    ProductUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProductAdded(uint256,string,uint256)": TypedContractEvent<
      ProductAddedEvent.InputTuple,
      ProductAddedEvent.OutputTuple,
      ProductAddedEvent.OutputObject
    >;
    ProductAdded: TypedContractEvent<
      ProductAddedEvent.InputTuple,
      ProductAddedEvent.OutputTuple,
      ProductAddedEvent.OutputObject
    >;

    "ProductBought(uint256,address)": TypedContractEvent<
      ProductBoughtEvent.InputTuple,
      ProductBoughtEvent.OutputTuple,
      ProductBoughtEvent.OutputObject
    >;
    ProductBought: TypedContractEvent<
      ProductBoughtEvent.InputTuple,
      ProductBoughtEvent.OutputTuple,
      ProductBoughtEvent.OutputObject
    >;

    "ProductRefund(uint256)": TypedContractEvent<
      ProductRefundEvent.InputTuple,
      ProductRefundEvent.OutputTuple,
      ProductRefundEvent.OutputObject
    >;
    ProductRefund: TypedContractEvent<
      ProductRefundEvent.InputTuple,
      ProductRefundEvent.OutputTuple,
      ProductRefundEvent.OutputObject
    >;

    "ProductUpdated(uint256,string,uint256)": TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;
    ProductUpdated: TypedContractEvent<
      ProductUpdatedEvent.InputTuple,
      ProductUpdatedEvent.OutputTuple,
      ProductUpdatedEvent.OutputObject
    >;
  };
}
